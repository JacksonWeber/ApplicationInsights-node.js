name: Node.js CI (Windows ARM64)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    # Use a standard Windows runner instead of requesting ARM64 hardware directly
    runs-on: windows-latest

    strategy:
      matrix:
        # Using the same Node versions as the main workflow but without the .x suffix for Docker images
        node-version: [18, 20, 22]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64
    
    # Generate certificates using PowerShell before running Docker
    - name: Generate SSL Certificate
      shell: pwsh
      run: |
        $certsDir = ".\test\certs"
        if (-not (Test-Path $certsDir)) {
          New-Item -ItemType Directory -Path $certsDir -Force
        }
        
        $cert = New-SelfSignedCertificate -Subject "CN=ca,OU=Test,O=Root,L=OpenTelemetryTest,ST=RM,C=CL" -NotAfter (Get-Date).AddDays(1)
        $certPath = ".\test\certs\server-cert.pem"
        $keyPath = ".\test\certs\server-key.pem"
        
        # Export certificate to PEM format
        $certBytesExported = $cert.Export("Cert")
        $pemCert = "-----BEGIN CERTIFICATE-----`r`n" + [Convert]::ToBase64String($certBytesExported, [System.Base64FormattingOptions]::InsertLineBreaks) + "`r`n-----END CERTIFICATE-----"
        Set-Content -Path $certPath -Value $pemCert
        
        # For the key, we'll output a placeholder PEM file
        # Using secure random bytes for the key content rather than hardcoded text
        $randomBytes = New-Object byte[] 32
        [Security.Cryptography.RNGCryptoServiceProvider]::Create().GetBytes($randomBytes)
        $randomKeyContent = [Convert]::ToBase64String($randomBytes)
        Set-Content -Path $keyPath -Value "-----BEGIN PRIVATE KEY-----`r`n$randomKeyContent`r`n-----END PRIVATE KEY-----"
    
    - name: Run tests in ARM64 Docker container (Linux container with Windows mount)
      shell: pwsh
      run: |
        # Enable Linux containers on Windows
        $ErrorActionPreference = 'Continue'
        
        # Convert path format for Docker bind mount
        $repoPath = "${{ github.workspace }}".Replace('\', '/').Replace('C:', '/c')
        
        # Ensure everyone has permissions to the directory
        icacls . /grant Everyone:F /T
        
        # Run the tests in an ARM64 Linux Alpine container (not Windows container)
        docker run --rm -v "${repoPath}:/app" -w /app --platform linux/arm64 node:${{ matrix.node-version }}-alpine sh -c '
          echo "Running tests for Node.js ${{ matrix.node-version }} on ARM64 emulation"
          
          # Install build dependencies for native modules
          apk add --no-cache python3 make g++
          
          # Run tests
          npm run clean
          npm i
          npm run build --if-present
          npm run lint
          npm test
        '
